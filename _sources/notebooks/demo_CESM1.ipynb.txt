{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "26efd514",
   "metadata": {},
   "source": [
    "## Example for CESM1 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd3f8e4a-6a62-4434-a7aa-8cf913527976",
   "metadata": {},
   "source": [
    "Reference:       \n",
    "- GitHub: https://github.com/ncar/cesm-lens-aws/    \n",
    "- Data/Variables Information: https://ncar.github.io/cesm-lens-aws/#data-catalog       \n",
    "- Reproduce CESM-LENS: http://gallery.pangeo.io/repos/NCAR/cesm-lens-aws/notebooks/kay-et-al-2015.v3.html    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "insured-finnish",
   "metadata": {},
   "source": [
    "**Step 0: load necessary packages and define parameters (no need to change)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a851a64a-c5db-4fb8-b226-d249cc2679bf",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/glade/work/zhonghua/miniconda3/envs/aws_urban/lib/python3.8/site-packages/xgboost/compat.py:31: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n",
      "  from pandas import MultiIndex, Int64Index\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--> The keys in the returned dictionary of datasets are constructed as follows:\n",
      "\t'component.experiment.frequency'\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      <progress value='2' class='' max='2' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      100.00% [2/2 00:01<00:00]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 51.6 s, sys: 35.5 s, total: 1min 27s\n",
      "Wall time: 59.9 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Display output of plots directly in Notebook\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import json\n",
    "from flaml import AutoML\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "import util\n",
    "\n",
    "with open(\"./config_cesm1.json\",'r') as load_f:\n",
    "#     param = json.loads(json.load(load_f))\n",
    "    param = json.load(load_f)\n",
    "    \n",
    "    model = param[\"model\"] # cesm1\n",
    "    city_loc = param[\"city_loc\"] # {\"lat\": 40.0150, \"lon\": -105.2705}\n",
    "    l_component = param[\"l_component\"]\n",
    "    a_component = param[\"a_component\"]\n",
    "    experiment = param[\"experiment\"]\n",
    "    frequency = param[\"frequency\"]\n",
    "    cam_ls = param[\"cam_ls\"]\n",
    "    clm_ls = param[\"clm_ls\"]\n",
    "    time = slice(param[\"time_start\"],param[\"time_end\"])\n",
    "    member_id = param[\"member_id\"]\n",
    "    estimator_list = param[\"estimator_list\"]\n",
    "    time_budget = param[\"time_budget\"]\n",
    "    features = param[\"features\"]\n",
    "    label = param[\"label\"]\n",
    "    clm_var_mask = param[\"label\"][0]\n",
    "    \n",
    "# get a dataset\n",
    "ds = util.get_data(model, city_loc, experiment, frequency, member_id, time, cam_ls, clm_ls)\n",
    "\n",
    "# create a dataframe\n",
    "ds['time'] = ds.indexes['time'].to_datetimeindex()\n",
    "df = ds.to_dataframe().reset_index().dropna()\n",
    "\n",
    "if \"PRSN\" in features:\n",
    "    df[\"PRSN\"] = df[\"PRECSC\"] + df[\"PRECSL\"]\n",
    "    \n",
    "# setup for automl\n",
    "automl = AutoML()\n",
    "automl_settings = {\n",
    "    \"time_budget\": time_budget,  # in seconds\n",
    "    \"metric\": 'r2',\n",
    "    \"task\": 'regression',\n",
    "    \"estimator_list\":estimator_list,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "productive-negative",
   "metadata": {},
   "source": [
    "### Step 1: data analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mechanical-metabolism",
   "metadata": {},
   "source": [
    "**xarray.Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "square-amateur",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:     (member_id: 1, time: 7299)\n",
       "Coordinates:\n",
       "  * member_id   (member_id) int64 2\n",
       "    lat         float64 40.05\n",
       "    lon         float64 255.0\n",
       "  * time        (time) datetime64[ns] 2081-01-02T12:00:00 ... 2100-12-31T12:0...\n",
       "Data variables:\n",
       "    TREFHT      (member_id, time) float32 255.8 266.8 271.1 ... 277.6 276.1\n",
       "    TREFHTMX    (member_id, time) float32 269.3 278.4 281.2 ... 283.9 277.5\n",
       "    FLNS        (member_id, time) float32 77.09 67.4 77.49 ... 64.89 37.45 38.35\n",
       "    FSNS        (member_id, time) float32 83.31 88.83 90.25 ... 67.98 80.27\n",
       "    PRECSC      (member_id, time) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 8.927e-12\n",
       "    PRECSL      (member_id, time) float32 4.887e-10 6.665e-10 ... 9.722e-10\n",
       "    PRECT       (member_id, time) float32 4.887e-10 6.665e-10 ... 2.32e-08\n",
       "    QBOT        (member_id, time) float32 0.000913 0.001889 ... 0.005432 0.00492\n",
       "    UBOT        (member_id, time) float32 5.461 4.815 4.506 ... 2.865 3.255\n",
       "    VBOT        (member_id, time) float32 1.27 3.189 3.691 ... 1.215 0.8704\n",
       "    TREFMXAV_U  (member_id, time) float32 259.6 270.0 279.8 ... 284.9 285.3\n",
       "Attributes: (12/14)\n",
       "    intake_esm_varname:        FLNS\\nFSNS\\nPRECSC\\nPRECSL\\nPRECT\\nQBOT\\nTREFH...\n",
       "    topography_file:           /scratch/p/pjk/mudryk/cesm1_1_2_LENS/inputdata...\n",
       "    title:                     UNSET\n",
       "    Version:                   $Name$\n",
       "    NCO:                       4.4.2\n",
       "    host:                      tcs-f02n07\n",
       "    ...                        ...\n",
       "    important_note:            This data is part of the project &#x27;Blind Evalua...\n",
       "    initial_file:              b.e11.B20TRC5CNBDRD.f09_g16.105.cam.i.2006-01-...\n",
       "    source:                    CAM\n",
       "    revision_Id:               $Id$\n",
       "    logname:                   mudryk\n",
       "    intake_esm_dataset_key:    atm.RCP85.daily</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-a3a93d25-d0bf-4eda-8f9f-40c37b30fd1e' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-a3a93d25-d0bf-4eda-8f9f-40c37b30fd1e' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>member_id</span>: 1</li><li><span class='xr-has-index'>time</span>: 7299</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-ba5dffd3-a547-4705-ba1c-5d3c08c19bba' class='xr-section-summary-in' type='checkbox'  checked><label for='section-ba5dffd3-a547-4705-ba1c-5d3c08c19bba' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>member_id</span></div><div class='xr-var-dims'>(member_id)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>2</div><input id='attrs-67229e8a-24e8-4396-91cd-0cc00d1b4602' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-67229e8a-24e8-4396-91cd-0cc00d1b4602' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3dc4c343-79b7-452a-95d0-2345b1ea11be' class='xr-var-data-in' type='checkbox'><label for='data-3dc4c343-79b7-452a-95d0-2345b1ea11be' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([2])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>lat</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>40.05</div><input id='attrs-67bfcca2-45b6-48af-b337-ff8590319b81' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-67bfcca2-45b6-48af-b337-ff8590319b81' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-afafbeef-1e5e-4769-8a88-c7ef7bfbfa4f' class='xr-var-data-in' type='checkbox'><label for='data-afafbeef-1e5e-4769-8a88-c7ef7bfbfa4f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>axis :</span></dt><dd>Y</dd><dt><span>bounds :</span></dt><dd>lat_bnds</dd><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>units :</span></dt><dd>degrees_north</dd></dl></div><div class='xr-var-data'><pre>array(40.05235672)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>lon</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>255.0</div><input id='attrs-89db4287-246a-448c-a022-af0c81523dc3' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-89db4287-246a-448c-a022-af0c81523dc3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3fa04a90-0cff-4a0c-9403-b41c269f48e0' class='xr-var-data-in' type='checkbox'><label for='data-3fa04a90-0cff-4a0c-9403-b41c269f48e0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>longitude</dd><dt><span>units :</span></dt><dd>degrees_east</dd></dl></div><div class='xr-var-data'><pre>array(255.)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2081-01-02T12:00:00 ... 2100-12-...</div><input id='attrs-d97b5361-51a3-46be-b002-02fc1e71db71' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d97b5361-51a3-46be-b002-02fc1e71db71' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-597d38d6-c6ed-4e63-b838-671b5ba06b7f' class='xr-var-data-in' type='checkbox'><label for='data-597d38d6-c6ed-4e63-b838-671b5ba06b7f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2081-01-02T12:00:00.000000000&#x27;, &#x27;2081-01-03T12:00:00.000000000&#x27;,\n",
       "       &#x27;2081-01-04T12:00:00.000000000&#x27;, ..., &#x27;2100-12-29T12:00:00.000000000&#x27;,\n",
       "       &#x27;2100-12-30T12:00:00.000000000&#x27;, &#x27;2100-12-31T12:00:00.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-70ef72b8-fdbc-420d-af2e-56b9c0eb48ec' class='xr-section-summary-in' type='checkbox'  checked><label for='section-70ef72b8-fdbc-420d-af2e-56b9c0eb48ec' class='xr-section-summary' >Data variables: <span>(11)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>TREFHT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>255.8 266.8 271.1 ... 277.6 276.1</div><input id='attrs-c9c4e1c3-3be5-4180-a56d-fcd9aa1926b4' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-c9c4e1c3-3be5-4180-a56d-fcd9aa1926b4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-fd9dcdf0-1752-4b50-bb35-4773b819203b' class='xr-var-data-in' type='checkbox'><label for='data-fd9dcdf0-1752-4b50-bb35-4773b819203b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Reference height temperature</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[255.84972, 266.79083, 271.12204, ..., 275.39145, 277.6332 ,\n",
       "        276.08655]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>TREFHTMX</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>269.3 278.4 281.2 ... 283.9 277.5</div><input id='attrs-e26ed343-728f-4879-a026-5c2f5ecf3cf5' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-e26ed343-728f-4879-a026-5c2f5ecf3cf5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-115a4571-cdac-4c07-bf73-2ddb18c0850b' class='xr-var-data-in' type='checkbox'><label for='data-115a4571-cdac-4c07-bf73-2ddb18c0850b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: maximum</dd><dt><span>long_name :</span></dt><dd>Maximum reference height temperature over output period</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[269.32785, 278.39655, 281.18195, ..., 283.58582, 283.92764,\n",
       "        277.4649 ]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>FLNS</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>77.09 67.4 77.49 ... 37.45 38.35</div><input id='attrs-8d2698fe-a64e-45df-9429-3b9c678a81b4' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-8d2698fe-a64e-45df-9429-3b9c678a81b4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-cfa4a9c8-6874-437a-9155-f8ee0ba3f6fe' class='xr-var-data-in' type='checkbox'><label for='data-cfa4a9c8-6874-437a-9155-f8ee0ba3f6fe' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sampling_Sequence :</span></dt><dd>rad_lwsw</dd><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Net longwave flux at surface</dd><dt><span>units :</span></dt><dd>W/m2</dd></dl></div><div class='xr-var-data'><pre>array([[77.0858  , 67.40266 , 77.493195, ..., 64.88807 , 37.445972,\n",
       "        38.35395 ]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>FSNS</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>83.31 88.83 90.25 ... 67.98 80.27</div><input id='attrs-5ddf3694-d073-42b4-bbb0-3f206a8e73ad' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-5ddf3694-d073-42b4-bbb0-3f206a8e73ad' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5a081fcd-6252-449d-aa39-957d16f23b74' class='xr-var-data-in' type='checkbox'><label for='data-5a081fcd-6252-449d-aa39-957d16f23b74' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sampling_Sequence :</span></dt><dd>rad_lwsw</dd><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Net solar flux at surface</dd><dt><span>units :</span></dt><dd>W/m2</dd></dl></div><div class='xr-var-data'><pre>array([[83.311066, 88.83119 , 90.24748 , ..., 87.44088 , 67.978905,\n",
       "        80.26761 ]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECSC</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 ... 0.0 0.0 8.927e-12</div><input id='attrs-82a2cc05-b1d4-4f7f-98f2-173b1a454165' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-82a2cc05-b1d4-4f7f-98f2-173b1a454165' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6197753e-4439-458e-b392-629cde154d2b' class='xr-var-data-in' type='checkbox'><label for='data-6197753e-4439-458e-b392-629cde154d2b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Convective snow rate (water equivalent)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00,\n",
       "        0.0000000e+00, 8.9266485e-12]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECSL</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>4.887e-10 6.665e-10 ... 9.722e-10</div><input id='attrs-b5d8d9d4-56a2-4779-97c3-d289572f1b46' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-b5d8d9d4-56a2-4779-97c3-d289572f1b46' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-537baf8e-e250-4b62-8b11-7849d8b3e868' class='xr-var-data-in' type='checkbox'><label for='data-537baf8e-e250-4b62-8b11-7849d8b3e868' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Large-scale (stable) snow rate (water equivalent)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[4.8865317e-10, 6.6647016e-10, 8.0305154e-14, ..., 4.6877151e-23,\n",
       "        6.2482954e-19, 9.7219222e-10]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>4.887e-10 6.665e-10 ... 2.32e-08</div><input id='attrs-5d43b2b0-eaeb-43de-ba91-7127518bab1c' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-5d43b2b0-eaeb-43de-ba91-7127518bab1c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-537714c0-9693-4f44-9064-bc16da7b95c7' class='xr-var-data-in' type='checkbox'><label for='data-537714c0-9693-4f44-9064-bc16da7b95c7' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Total (convective and large-scale) precipitation rate (liq + ice)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[4.8865317e-10, 6.6652112e-10, 2.5380477e-11, ..., 7.4445916e-10,\n",
       "        6.5936290e-10, 2.3197726e-08]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>QBOT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.000913 0.001889 ... 0.00492</div><input id='attrs-d507d36f-ec56-49be-9e21-a7cc078c62dd' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-d507d36f-ec56-49be-9e21-a7cc078c62dd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-865c6da7-ce88-4de6-9ef4-623f595419a5' class='xr-var-data-in' type='checkbox'><label for='data-865c6da7-ce88-4de6-9ef4-623f595419a5' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Lowest model level water vapor mixing ratio</dd><dt><span>units :</span></dt><dd>kg/kg</dd></dl></div><div class='xr-var-data'><pre>array([[0.00091295, 0.00188927, 0.00333069, ..., 0.00430955, 0.00543191,\n",
       "        0.00492025]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>UBOT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>5.461 4.815 4.506 ... 2.865 3.255</div><input id='attrs-c3ac18e3-7628-483f-aa51-c8ecc7070263' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-c3ac18e3-7628-483f-aa51-c8ecc7070263' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-be127b10-0311-489a-a128-a5608eee5fc2' class='xr-var-data-in' type='checkbox'><label for='data-be127b10-0311-489a-a128-a5608eee5fc2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Lowest model level zonal wind</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[5.461293 , 4.814545 , 4.5064588, ..., 5.497996 , 2.8646276,\n",
       "        3.254671 ]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>VBOT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>1.27 3.189 3.691 ... 1.215 0.8704</div><input id='attrs-0ab705a1-1446-4708-9de7-5a0c55d1b6a6' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-0ab705a1-1446-4708-9de7-5a0c55d1b6a6' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4d731a49-4937-4be7-ab15-889d497ae7ff' class='xr-var-data-in' type='checkbox'><label for='data-4d731a49-4937-4be7-ab15-889d497ae7ff' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Lowest model level meridional wind</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[1.2702359 , 3.1894999 , 3.6906984 , ..., 1.3250201 , 1.2154012 ,\n",
       "        0.87040335]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>TREFMXAV_U</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>259.6 270.0 279.8 ... 284.9 285.3</div><input id='attrs-868b4d65-6ab6-4e06-ad78-0ae243c4cdf0' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-868b4d65-6ab6-4e06-ad78-0ae243c4cdf0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c2174324-1ca8-43a8-a522-8326905d0b76' class='xr-var-data-in' type='checkbox'><label for='data-c2174324-1ca8-43a8-a522-8326905d0b76' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Urban daily maximum of average 2-m temperature</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[259.64197, 269.9728 , 279.82883, ..., 283.00278, 284.9374 ,\n",
       "        285.26486]], dtype=float32)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-2dd5d0b3-525f-48f4-bee9-20de9c33585d' class='xr-section-summary-in' type='checkbox'  ><label for='section-2dd5d0b3-525f-48f4-bee9-20de9c33585d' class='xr-section-summary' >Attributes: <span>(14)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>intake_esm_varname :</span></dt><dd>FLNS\n",
       "FSNS\n",
       "PRECSC\n",
       "PRECSL\n",
       "PRECT\n",
       "QBOT\n",
       "TREFHT\n",
       "TREFHTMX\n",
       "UBOT\n",
       "VBOT</dd><dt><span>topography_file :</span></dt><dd>/scratch/p/pjk/mudryk/cesm1_1_2_LENS/inputdata/atm/cam/topo/USGS-gtopo30_0.9x1.25_remap_c051027.nc</dd><dt><span>title :</span></dt><dd>UNSET</dd><dt><span>Version :</span></dt><dd>$Name$</dd><dt><span>NCO :</span></dt><dd>4.4.2</dd><dt><span>host :</span></dt><dd>tcs-f02n07</dd><dt><span>nco_openmp_thread_number :</span></dt><dd>1</dd><dt><span>Conventions :</span></dt><dd>CF-1.0</dd><dt><span>important_note :</span></dt><dd>This data is part of the project &#x27;Blind Evaluation of Lossy Data-Compression in LENS&#x27;.  Please exercise caution before using this data for other purposes.</dd><dt><span>initial_file :</span></dt><dd>b.e11.B20TRC5CNBDRD.f09_g16.105.cam.i.2006-01-01-00000.nc</dd><dt><span>source :</span></dt><dd>CAM</dd><dt><span>revision_Id :</span></dt><dd>$Id$</dd><dt><span>logname :</span></dt><dd>mudryk</dd><dt><span>intake_esm_dataset_key :</span></dt><dd>atm.RCP85.daily</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:     (member_id: 1, time: 7299)\n",
       "Coordinates:\n",
       "  * member_id   (member_id) int64 2\n",
       "    lat         float64 40.05\n",
       "    lon         float64 255.0\n",
       "  * time        (time) datetime64[ns] 2081-01-02T12:00:00 ... 2100-12-31T12:0...\n",
       "Data variables:\n",
       "    TREFHT      (member_id, time) float32 255.8 266.8 271.1 ... 277.6 276.1\n",
       "    TREFHTMX    (member_id, time) float32 269.3 278.4 281.2 ... 283.9 277.5\n",
       "    FLNS        (member_id, time) float32 77.09 67.4 77.49 ... 64.89 37.45 38.35\n",
       "    FSNS        (member_id, time) float32 83.31 88.83 90.25 ... 67.98 80.27\n",
       "    PRECSC      (member_id, time) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 8.927e-12\n",
       "    PRECSL      (member_id, time) float32 4.887e-10 6.665e-10 ... 9.722e-10\n",
       "    PRECT       (member_id, time) float32 4.887e-10 6.665e-10 ... 2.32e-08\n",
       "    QBOT        (member_id, time) float32 0.000913 0.001889 ... 0.005432 0.00492\n",
       "    UBOT        (member_id, time) float32 5.461 4.815 4.506 ... 2.865 3.255\n",
       "    VBOT        (member_id, time) float32 1.27 3.189 3.691 ... 1.215 0.8704\n",
       "    TREFMXAV_U  (member_id, time) float32 259.6 270.0 279.8 ... 284.9 285.3\n",
       "Attributes: (12/14)\n",
       "    intake_esm_varname:        FLNS\\nFSNS\\nPRECSC\\nPRECSL\\nPRECT\\nQBOT\\nTREFH...\n",
       "    topography_file:           /scratch/p/pjk/mudryk/cesm1_1_2_LENS/inputdata...\n",
       "    title:                     UNSET\n",
       "    Version:                   $Name$\n",
       "    NCO:                       4.4.2\n",
       "    host:                      tcs-f02n07\n",
       "    ...                        ...\n",
       "    important_note:            This data is part of the project 'Blind Evalua...\n",
       "    initial_file:              b.e11.B20TRC5CNBDRD.f09_g16.105.cam.i.2006-01-...\n",
       "    source:                    CAM\n",
       "    revision_Id:               $Id$\n",
       "    logname:                   mudryk\n",
       "    intake_esm_dataset_key:    atm.RCP85.daily"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "breeding-junior",
   "metadata": {},
   "source": [
    "**pandas dataframe**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "86c130d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>member_id</th>\n",
       "      <th>time</th>\n",
       "      <th>TREFHT</th>\n",
       "      <th>TREFHTMX</th>\n",
       "      <th>FLNS</th>\n",
       "      <th>FSNS</th>\n",
       "      <th>PRECSC</th>\n",
       "      <th>PRECSL</th>\n",
       "      <th>PRECT</th>\n",
       "      <th>QBOT</th>\n",
       "      <th>UBOT</th>\n",
       "      <th>VBOT</th>\n",
       "      <th>lat</th>\n",
       "      <th>lon</th>\n",
       "      <th>TREFMXAV_U</th>\n",
       "      <th>PRSN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-02 12:00:00</td>\n",
       "      <td>255.849716</td>\n",
       "      <td>269.327850</td>\n",
       "      <td>77.085800</td>\n",
       "      <td>83.311066</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.886532e-10</td>\n",
       "      <td>4.886532e-10</td>\n",
       "      <td>0.000913</td>\n",
       "      <td>5.461293</td>\n",
       "      <td>1.270236</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>255.0</td>\n",
       "      <td>259.641968</td>\n",
       "      <td>4.886532e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-03 12:00:00</td>\n",
       "      <td>266.790833</td>\n",
       "      <td>278.396545</td>\n",
       "      <td>67.402657</td>\n",
       "      <td>88.831192</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.664702e-10</td>\n",
       "      <td>6.665211e-10</td>\n",
       "      <td>0.001889</td>\n",
       "      <td>4.814545</td>\n",
       "      <td>3.189500</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>255.0</td>\n",
       "      <td>269.972809</td>\n",
       "      <td>6.664702e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-04 12:00:00</td>\n",
       "      <td>271.122040</td>\n",
       "      <td>281.181946</td>\n",
       "      <td>77.493195</td>\n",
       "      <td>90.247482</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.030515e-14</td>\n",
       "      <td>2.538048e-11</td>\n",
       "      <td>0.003331</td>\n",
       "      <td>4.506459</td>\n",
       "      <td>3.690698</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>255.0</td>\n",
       "      <td>279.828827</td>\n",
       "      <td>8.030515e-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-05 12:00:00</td>\n",
       "      <td>276.329895</td>\n",
       "      <td>281.844543</td>\n",
       "      <td>64.789749</td>\n",
       "      <td>93.343193</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.896001e-20</td>\n",
       "      <td>2.508245e-09</td>\n",
       "      <td>0.004209</td>\n",
       "      <td>5.162941</td>\n",
       "      <td>4.963157</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>255.0</td>\n",
       "      <td>282.674103</td>\n",
       "      <td>1.896001e-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-06 12:00:00</td>\n",
       "      <td>275.347229</td>\n",
       "      <td>280.980469</td>\n",
       "      <td>69.647041</td>\n",
       "      <td>80.993706</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.442079e-17</td>\n",
       "      <td>7.844814e-09</td>\n",
       "      <td>0.004014</td>\n",
       "      <td>4.478484</td>\n",
       "      <td>4.272586</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>255.0</td>\n",
       "      <td>283.518707</td>\n",
       "      <td>5.442079e-17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   member_id                time      TREFHT    TREFHTMX       FLNS  \\\n",
       "0          2 2081-01-02 12:00:00  255.849716  269.327850  77.085800   \n",
       "1          2 2081-01-03 12:00:00  266.790833  278.396545  67.402657   \n",
       "2          2 2081-01-04 12:00:00  271.122040  281.181946  77.493195   \n",
       "3          2 2081-01-05 12:00:00  276.329895  281.844543  64.789749   \n",
       "4          2 2081-01-06 12:00:00  275.347229  280.980469  69.647041   \n",
       "\n",
       "        FSNS  PRECSC        PRECSL         PRECT      QBOT      UBOT  \\\n",
       "0  83.311066     0.0  4.886532e-10  4.886532e-10  0.000913  5.461293   \n",
       "1  88.831192     0.0  6.664702e-10  6.665211e-10  0.001889  4.814545   \n",
       "2  90.247482     0.0  8.030515e-14  2.538048e-11  0.003331  4.506459   \n",
       "3  93.343193     0.0  1.896001e-20  2.508245e-09  0.004209  5.162941   \n",
       "4  80.993706     0.0  5.442079e-17  7.844814e-09  0.004014  4.478484   \n",
       "\n",
       "       VBOT        lat    lon  TREFMXAV_U          PRSN  \n",
       "0  1.270236  40.052357  255.0  259.641968  4.886532e-10  \n",
       "1  3.189500  40.052357  255.0  269.972809  6.664702e-10  \n",
       "2  3.690698  40.052357  255.0  279.828827  8.030515e-14  \n",
       "3  4.963157  40.052357  255.0  282.674103  1.896001e-20  \n",
       "4  4.272586  40.052357  255.0  283.518707  5.442079e-17  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "designing-asbestos",
   "metadata": {},
   "source": [
    "**data visualization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "standing-infrared",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2b3bfa600a00>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ds[\"TREFMXAV_U\"].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "confused-affect",
   "metadata": {},
   "source": [
    "### Step 2: automated machine learning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "defensive-footage",
   "metadata": {},
   "source": [
    "**train a model (emulator)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "clear-driver",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBRegressor(base_score=0.5, booster='gbtree',\n",
      "             colsample_bylevel=0.8981353296453468, colsample_bynode=1,\n",
      "             colsample_bytree=0.8589079860800738, gamma=0, gpu_id=-1,\n",
      "             grow_policy='lossguide', importance_type='gain',\n",
      "             interaction_constraints='', learning_rate=0.05211228610238813,\n",
      "             max_delta_step=0, max_depth=0, max_leaves=29,\n",
      "             min_child_weight=45.3846760978798, missing=nan,\n",
      "             monotone_constraints='()', n_estimators=299, n_jobs=-1,\n",
      "             num_parallel_tree=1, random_state=0, reg_alpha=0.01917865165509354,\n",
      "             reg_lambda=2.2296607355174927, scale_pos_weight=1,\n",
      "             subsample=0.9982731696185565, tree_method='hist',\n",
      "             use_label_encoder=False, validate_parameters=1, verbosity=0)\n",
      "CPU times: user 3min 35s, sys: 2.67 s, total: 3min 38s\n",
      "Wall time: 15.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# assume that we want to split the data into training data and testing data\n",
    "# let's use first 95% for training, and the remaining for testing \n",
    "idx = df.shape[0]\n",
    "train = df.iloc[:int(0.95*idx),:]\n",
    "test = df.iloc[int(0.95*idx):,:]\n",
    "(X_train, y_train) = (train[features], train[label].values)\n",
    "(X_test, y_test) = (test[features], test[label].values)\n",
    "\n",
    "# train the model\n",
    "automl.fit(X_train=X_train, y_train=y_train,\n",
    "           **automl_settings, verbose=-1)\n",
    "print(automl.model.estimator)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "secure-worst",
   "metadata": {},
   "source": [
    "**apply and test the machine learning model**      \n",
    "use `automl.predict(X)` to apply the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "sunrise-removal",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model performance using training data:\n",
      "root mean square error: 1.7566193\n",
      "r2: 0.9681344385429989 \n",
      "\n",
      "model performance using testing data:\n",
      "root mean square error: 2.3287773\n",
      "r2: 0.9384653117109892\n"
     ]
    }
   ],
   "source": [
    "# training data\n",
    "print(\"model performance using training data:\")\n",
    "y_pred = automl.predict(X_train)\n",
    "print(\"root mean square error:\", \n",
    "      mean_squared_error(y_true=y_train, y_pred=y_pred, squared=False))\n",
    "print(\"r2:\", r2_score(y_true=y_train, y_pred=y_pred),\"\\n\")\n",
    "import pandas as pd\n",
    "d_train = {\"time\":train[\"time\"],\"y_train\":y_train.reshape(-1),\"y_pred\":y_pred.reshape(-1)}\n",
    "df_train = pd.DataFrame(d_train).set_index(\"time\")\n",
    "\n",
    "# testing data\n",
    "print(\"model performance using testing data:\")\n",
    "y_pred = automl.predict(X_test)\n",
    "print(\"root mean square error:\", \n",
    "      mean_squared_error(y_true=y_test, y_pred=y_pred, squared=False))\n",
    "print(\"r2:\", r2_score(y_true=y_test, y_pred=y_pred))\n",
    "d_test = {\"time\":test[\"time\"],\"y_test\":y_test.reshape(-1),\"y_pred\":y_pred.reshape(-1)}\n",
    "df_test = pd.DataFrame(d_test).set_index(\"time\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "technical-summary",
   "metadata": {},
   "source": [
    "**visualization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "supported-pension",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,3))\n",
    "fig.suptitle('emulator evaluation')\n",
    "df_train[\"y_train\"].plot(label=\"reference\",c=\"k\",ax=ax1)\n",
    "df_train[\"y_pred\"].plot(label=\"prediction\",c=\"r\",ax=ax1)\n",
    "ax1.set_title(\"training data\")\n",
    "ax1.set_ylabel(\"urban daily maximum temperature, K\")\n",
    "\n",
    "df_test[\"y_test\"].plot(label=\"reference\",c=\"k\",ax=ax2)\n",
    "df_test[\"y_pred\"].plot(label=\"prediction\",c=\"r\",ax=ax2)\n",
    "ax2.set_title(\"testing data\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
