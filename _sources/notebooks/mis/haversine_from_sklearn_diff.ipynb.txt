{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f3f86140",
   "metadata": {},
   "source": [
    "# Use sklearn for haversine distance calculation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e1b7f22f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from haversine import haversine, Unit\n",
    "from sklearn.metrics.pairwise import haversine_distances\n",
    "from math import radians"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6bf97a89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "392.2172595594006"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# results from the haversine package\n",
    "lyon = (45.7597, 4.8422) # (lat, lon)\n",
    "paris = (48.8567, 2.3508)\n",
    "haversine(lyon, paris)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b751b642",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0.        , 392.21725956],\n",
       "       [392.21725956,   0.        ]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# results from the sklearn package, based on\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.haversine_distances.html\n",
    "lyon = [45.7597, 4.8422]\n",
    "paris = [48.8567, 2.3508]\n",
    "lyon_in_radians = [radians(_) for _ in lyon]\n",
    "paris_in_radians = [radians(_) for _ in paris]\n",
    "result = haversine_distances([lyon_in_radians, paris_in_radians])\n",
    "# multiply by Earth radius to get kilometers\n",
    "# provided by https://github.com/mapado/haversine/blob/main/haversine/haversine.py \n",
    "result * 6371008.8/1000  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abeed4d8",
   "metadata": {},
   "source": [
    "## haversine package\n",
    "\n",
    "https://pypi.org/project/haversine/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7878fc17",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Longitude 359 is out of range [-180, 180]",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m a \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m359\u001b[39m) \u001b[38;5;66;03m# (lat, lon)\u001b[39;00m\n\u001b[1;32m      3\u001b[0m b \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m----> 4\u001b[0m \u001b[43mhaversine\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mb\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/site-packages/haversine/haversine.py:218\u001b[0m, in \u001b[0;36mhaversine\u001b[0;34m(point1, point2, unit, normalize, check)\u001b[0m\n\u001b[1;32m    216\u001b[0m     lat2, lng2 \u001b[38;5;241m=\u001b[39m _normalize(lat2, lng2)\n\u001b[1;32m    217\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m check:\n\u001b[0;32m--> 218\u001b[0m     \u001b[43m_ensure_lat_lon\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlat1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlng1\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    219\u001b[0m     _ensure_lat_lon(lat2, lng2)\n\u001b[1;32m    221\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m get_avg_earth_radius(unit) \u001b[38;5;241m*\u001b[39m _haversine_kernel(lat1, lng1, lat2, lng2)\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/site-packages/haversine/haversine.py:95\u001b[0m, in \u001b[0;36m_ensure_lat_lon\u001b[0;34m(lat, lon)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLatitude \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlat\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is out of range [-90, 90]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     94\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m lon \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m180\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m lon \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m180\u001b[39m:\n\u001b[0;32m---> 95\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLongitude \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlon\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is out of range [-180, 180]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: Longitude 359 is out of range [-180, 180]"
     ]
    }
   ],
   "source": [
    "# Using 359 for lon doesn't work\n",
    "a = (0, 359) # (lat, lon)\n",
    "b = (0, 1)\n",
    "haversine(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "08d2c3d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "222.3901604670658"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using -1 for lon works\n",
    "a = (0, -1) # (lat, lon)\n",
    "b = (0, 1)\n",
    "haversine(a, b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18fa7d26",
   "metadata": {},
   "source": [
    "## sklearn\n",
    "\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.haversine_distances.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c4cde58e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0.        , 222.39016047],\n",
       "       [222.39016047,   0.        ]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using 359 for lon works\n",
    "a = [0, 359]\n",
    "b = [0, 1]\n",
    "a_in_radians = [radians(_) for _ in a]\n",
    "b_in_radians = [radians(_) for _ in b]\n",
    "result = haversine_distances([a_in_radians, b_in_radians])\n",
    "result * 6371008.8/1000  # multiply by Earth radius to get kilometers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4bbe050c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0.        , 222.39016047],\n",
       "       [222.39016047,   0.        ]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using -1 for lon works \n",
    "a = [0, -1]\n",
    "b = [0, 1]\n",
    "a_in_radians = [radians(_) for _ in a]\n",
    "b_in_radians = [radians(_) for _ in b]\n",
    "result = haversine_distances([a_in_radians, b_in_radians])\n",
    "result * 6371008.8/1000  # multiply by Earth radius to get kilometers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8db608b",
   "metadata": {},
   "source": [
    "## define our own functions using sklearn, but there is a difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d00b9b2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def havesine_dist(a, b):\n",
    "    a_in_radians = [radians(_) for _ in a]\n",
    "    b_in_radians = [radians(_) for _ in b]\n",
    "    result = haversine_distances([a_in_radians, b_in_radians])* 6371008.8/1000\n",
    "    return result[0][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8cd0a74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "222.39016046706487"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using 359 for lon works\n",
    "a = [0, 359]\n",
    "b = [0, 1]\n",
    "havesine_dist(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6afa12eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "222.3901604670658"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using -1 for lon works\n",
    "a = [0, -1]\n",
    "b = [0, 1]\n",
    "havesine_dist(a, b)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
