{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "26efd514",
   "metadata": {},
   "source": [
    "## Example for CESM 1 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd3f8e4a-6a62-4434-a7aa-8cf913527976",
   "metadata": {},
   "source": [
    "Tutorial at:     \n",
    "- GitHub: https://github.com/ncar/cesm-lens-aws/   \n",
    "- Reproduce CESM-LENS: http://gallery.pangeo.io/repos/NCAR/cesm-lens-aws/notebooks/kay-et-al-2015.v3.html    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "insured-finnish",
   "metadata": {},
   "source": [
    "**Step 0: load necessary packages and define parameters (no need to change)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a851a64a-c5db-4fb8-b226-d249cc2679bf",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/glade/work/zhonghua/miniconda3/envs/aws_urban/lib/python3.8/site-packages/xgboost/compat.py:31: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n",
      "  from pandas import MultiIndex, Int64Index\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--> The keys in the returned dictionary of datasets are constructed as follows:\n",
      "\t'component.experiment.frequency'\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      <progress value='2' class='' max='2' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      100.00% [2/2 00:03<00:00]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 55.3 s, sys: 27.9 s, total: 1min 23s\n",
      "Wall time: 1min 14s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Display output of plots directly in Notebook\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import json\n",
    "from flaml import AutoML\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "import util\n",
    "\n",
    "with open(\"./config.json\",'r') as load_f:\n",
    "#     param = json.loads(json.load(load_f))\n",
    "    param = json.load(load_f)\n",
    "    \n",
    "    city_loc = param[\"city_loc\"] # {\"lat\": 40.1164, \"lon\": -88.2434}\n",
    "    catalog_url = param[\"catalog_url\"]\n",
    "    l_component = param[\"l_component\"]\n",
    "    a_component = param[\"a_component\"]\n",
    "    experiment = param[\"experiment\"]\n",
    "    frequency = param[\"frequency\"]\n",
    "    cam_ls = param[\"cam_ls\"]\n",
    "    clm_ls = param[\"clm_ls\"]\n",
    "    time = slice(param[\"time_start\"],param[\"time_end\"])\n",
    "    member_id = param[\"member_id\"]\n",
    "    estimator_list = param[\"estimator_list\"]\n",
    "    time_budget = param[\"time_budget\"]\n",
    "    features = param[\"features\"]\n",
    "    label = param[\"label\"]\n",
    "    clm_var_mask = param[\"label\"][0]\n",
    "    \n",
    "# get a dataset\n",
    "ds = util.get_data(city_loc, experiment, frequency, member_id, time, cam_ls, clm_ls, \n",
    "                   clm_var_mask,\n",
    "                   a_component=\"atm\", l_component=\"lnd\")\n",
    "\n",
    "# create a dataframe\n",
    "ds['time'] = ds.indexes['time'].to_datetimeindex()\n",
    "df = ds.to_dataframe().reset_index().dropna()\n",
    "\n",
    "if \"PRSN\" in features:\n",
    "    df[\"PRSN\"] = df[\"PRECSC\"] + df[\"PRECSL\"]\n",
    "    \n",
    "# setup for automl\n",
    "automl = AutoML()\n",
    "automl_settings = {\n",
    "    \"time_budget\": time_budget,  # in seconds\n",
    "    \"metric\": 'r2',\n",
    "    \"task\": 'regression',\n",
    "    \"estimator_list\":estimator_list,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "productive-negative",
   "metadata": {},
   "source": [
    "### Step 1: data analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mechanical-metabolism",
   "metadata": {},
   "source": [
    "**xarray.Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "square-amateur",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:     (member_id: 1, time: 7299)\n",
       "Coordinates:\n",
       "  * member_id   (member_id) int64 2\n",
       "    lat         float64 40.05\n",
       "    lon         float64 271.2\n",
       "  * time        (time) datetime64[ns] 2081-01-02T12:00:00 ... 2100-12-31T12:0...\n",
       "Data variables:\n",
       "    TREFHT      (member_id, time) float32 267.5 267.7 275.7 ... 280.6 278.0\n",
       "    TREFHTMX    (member_id, time) float32 270.9 276.0 283.8 ... 289.3 285.7\n",
       "    FLNS        (member_id, time) float32 67.13 75.71 53.1 ... 72.42 71.2 62.57\n",
       "    FSNS        (member_id, time) float32 93.39 89.37 88.2 ... 83.75 89.64 77.89\n",
       "    PRECSC      (member_id, time) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n",
       "    PRECSL      (member_id, time) float32 3.048e-09 8.637e-10 ... 0.0 0.0\n",
       "    PRECT       (member_id, time) float32 3.048e-09 8.637e-10 ... 4.164e-10\n",
       "    QBOT        (member_id, time) float32 0.001285 0.001422 ... 0.004192\n",
       "    UBOT        (member_id, time) float32 7.931 1.266 -1.619 ... 3.694 -0.1972\n",
       "    VBOT        (member_id, time) float32 0.4976 2.597 5.257 ... 1.785 0.1336\n",
       "    TREFMXAV_U  (member_id, time) float32 291.6 271.9 276.9 ... 288.4 289.4\n",
       "Attributes: (12/14)\n",
       "    NCO:                       4.4.2\n",
       "    host:                      tcs-f02n07\n",
       "    revision_Id:               $Id$\n",
       "    Version:                   $Name$\n",
       "    initial_file:              b.e11.B20TRC5CNBDRD.f09_g16.105.cam.i.2006-01-...\n",
       "    source:                    CAM\n",
       "    ...                        ...\n",
       "    intake_esm_varname:        FLNS\\nFSNS\\nPRECSC\\nPRECSL\\nPRECT\\nQBOT\\nTREFH...\n",
       "    important_note:            This data is part of the project &#x27;Blind Evalua...\n",
       "    Conventions:               CF-1.0\n",
       "    logname:                   mudryk\n",
       "    title:                     UNSET\n",
       "    intake_esm_dataset_key:    atm.RCP85.daily</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-90d691fd-48fe-44a5-915b-9ffc50429e63' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-90d691fd-48fe-44a5-915b-9ffc50429e63' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>member_id</span>: 1</li><li><span class='xr-has-index'>time</span>: 7299</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-23ee96db-4ddc-487e-899e-28e628b3bbc5' class='xr-section-summary-in' type='checkbox'  checked><label for='section-23ee96db-4ddc-487e-899e-28e628b3bbc5' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>member_id</span></div><div class='xr-var-dims'>(member_id)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>2</div><input id='attrs-32f045ab-f407-405c-baee-6cceac125970' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-32f045ab-f407-405c-baee-6cceac125970' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2ddd366e-8701-40db-818f-e3585eeef1e8' class='xr-var-data-in' type='checkbox'><label for='data-2ddd366e-8701-40db-818f-e3585eeef1e8' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([2])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>lat</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>40.05</div><input id='attrs-000af851-988a-4f6d-80c8-8d43840be961' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-000af851-988a-4f6d-80c8-8d43840be961' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9b5d3e40-9d1c-4140-8529-c2888c952125' class='xr-var-data-in' type='checkbox'><label for='data-9b5d3e40-9d1c-4140-8529-c2888c952125' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>axis :</span></dt><dd>Y</dd><dt><span>bounds :</span></dt><dd>lat_bnds</dd><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>units :</span></dt><dd>degrees_north</dd></dl></div><div class='xr-var-data'><pre>array(40.05235672)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>lon</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>271.2</div><input id='attrs-22fcd9a1-3f38-4688-a73d-fdcb28e6e3ed' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-22fcd9a1-3f38-4688-a73d-fdcb28e6e3ed' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-740cb2eb-62b0-46b1-a591-f99ede786101' class='xr-var-data-in' type='checkbox'><label for='data-740cb2eb-62b0-46b1-a591-f99ede786101' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>longitude</dd><dt><span>units :</span></dt><dd>degrees_east</dd></dl></div><div class='xr-var-data'><pre>array(271.25)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2081-01-02T12:00:00 ... 2100-12-...</div><input id='attrs-fb476b7b-b12c-4270-897a-9cd4b4dbc2b7' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-fb476b7b-b12c-4270-897a-9cd4b4dbc2b7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8ebf7f04-7e29-424e-b5d7-03010915eb3d' class='xr-var-data-in' type='checkbox'><label for='data-8ebf7f04-7e29-424e-b5d7-03010915eb3d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2081-01-02T12:00:00.000000000&#x27;, &#x27;2081-01-03T12:00:00.000000000&#x27;,\n",
       "       &#x27;2081-01-04T12:00:00.000000000&#x27;, ..., &#x27;2100-12-29T12:00:00.000000000&#x27;,\n",
       "       &#x27;2100-12-30T12:00:00.000000000&#x27;, &#x27;2100-12-31T12:00:00.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-b6ee6a7e-a410-4fe6-9b48-0a80e8bd3f35' class='xr-section-summary-in' type='checkbox'  checked><label for='section-b6ee6a7e-a410-4fe6-9b48-0a80e8bd3f35' class='xr-section-summary' >Data variables: <span>(11)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>TREFHT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>267.5 267.7 275.7 ... 280.6 278.0</div><input id='attrs-a25e3bd3-5fd7-47cf-a5a0-7057cbc50fb0' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-a25e3bd3-5fd7-47cf-a5a0-7057cbc50fb0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7f784bd1-0dbd-4003-b940-560d7064946e' class='xr-var-data-in' type='checkbox'><label for='data-7f784bd1-0dbd-4003-b940-560d7064946e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Reference height temperature</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[267.53082, 267.6877 , 275.67203, ..., 279.2156 , 280.643  ,\n",
       "        278.0016 ]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>TREFHTMX</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>270.9 276.0 283.8 ... 289.3 285.7</div><input id='attrs-0a3f8a25-7cce-4389-9c91-6c3f533843b9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-0a3f8a25-7cce-4389-9c91-6c3f533843b9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c7101ca6-67c2-42e8-9ad9-a192e4d805b4' class='xr-var-data-in' type='checkbox'><label for='data-c7101ca6-67c2-42e8-9ad9-a192e4d805b4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: maximum</dd><dt><span>long_name :</span></dt><dd>Maximum reference height temperature over output period</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[270.85828, 276.01318, 283.7991 , ..., 287.9728 , 289.29352,\n",
       "        285.68597]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>FLNS</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>67.13 75.71 53.1 ... 71.2 62.57</div><input id='attrs-2af26957-29dc-4f45-b053-141bbb160437' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-2af26957-29dc-4f45-b053-141bbb160437' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2acb0f84-961f-4d2c-ac36-de2a52dcf42d' class='xr-var-data-in' type='checkbox'><label for='data-2acb0f84-961f-4d2c-ac36-de2a52dcf42d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sampling_Sequence :</span></dt><dd>rad_lwsw</dd><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Net longwave flux at surface</dd><dt><span>units :</span></dt><dd>W/m2</dd></dl></div><div class='xr-var-data'><pre>array([[67.12792 , 75.70777 , 53.098457, ..., 72.4231  , 71.20017 ,\n",
       "        62.573097]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>FSNS</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>93.39 89.37 88.2 ... 89.64 77.89</div><input id='attrs-2f2fdd08-badd-4317-b425-7eb9151d537c' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-2f2fdd08-badd-4317-b425-7eb9151d537c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0025c6ee-dddf-4eee-95d8-dc32e52e7aeb' class='xr-var-data-in' type='checkbox'><label for='data-0025c6ee-dddf-4eee-95d8-dc32e52e7aeb' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sampling_Sequence :</span></dt><dd>rad_lwsw</dd><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Net solar flux at surface</dd><dt><span>units :</span></dt><dd>W/m2</dd></dl></div><div class='xr-var-data'><pre>array([[93.389015, 89.367584, 88.20241 , ..., 83.74923 , 89.643875,\n",
       "        77.89158 ]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECSC</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id='attrs-aaeeedf5-5e5b-4bd5-9e10-7f6900ccabab' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-aaeeedf5-5e5b-4bd5-9e10-7f6900ccabab' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a6b626b3-14f7-4211-8c44-221df08ac47a' class='xr-var-data-in' type='checkbox'><label for='data-a6b626b3-14f7-4211-8c44-221df08ac47a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Convective snow rate (water equivalent)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECSL</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>3.048e-09 8.637e-10 ... 0.0 0.0</div><input id='attrs-c1a2594e-2f76-4386-a4fa-977261c90e3d' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-c1a2594e-2f76-4386-a4fa-977261c90e3d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d8a4d590-0ebf-47e6-a7c9-81c25339b6da' class='xr-var-data-in' type='checkbox'><label for='data-d8a4d590-0ebf-47e6-a7c9-81c25339b6da' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Large-scale (stable) snow rate (water equivalent)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[3.047973e-09, 8.636923e-10, 1.331122e-09, ..., 0.000000e+00,\n",
       "        0.000000e+00, 0.000000e+00]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>3.048e-09 8.637e-10 ... 4.164e-10</div><input id='attrs-01247088-04b5-45db-a7ac-66ec69a620f7' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-01247088-04b5-45db-a7ac-66ec69a620f7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-886b207b-0751-4e76-b131-5250a77d4154' class='xr-var-data-in' type='checkbox'><label for='data-886b207b-0751-4e76-b131-5250a77d4154' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Total (convective and large-scale) precipitation rate (liq + ice)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[3.0479730e-09, 8.6370522e-10, 2.9007619e-09, ..., 9.5072794e-10,\n",
       "        4.6768678e-10, 4.1641376e-10]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>QBOT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.001285 0.001422 ... 0.004192</div><input id='attrs-8c8a83dc-6796-41ed-ba39-77e180f97fb7' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-8c8a83dc-6796-41ed-ba39-77e180f97fb7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-240f171b-3044-49ac-a497-814dd87a24ac' class='xr-var-data-in' type='checkbox'><label for='data-240f171b-3044-49ac-a497-814dd87a24ac' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Lowest model level water vapor mixing ratio</dd><dt><span>units :</span></dt><dd>kg/kg</dd></dl></div><div class='xr-var-data'><pre>array([[0.00128525, 0.00142246, 0.00188326, ..., 0.00491805, 0.00424695,\n",
       "        0.00419243]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>UBOT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>7.931 1.266 ... 3.694 -0.1972</div><input id='attrs-cbe91ccb-54e3-4035-83b5-398e4486699f' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-cbe91ccb-54e3-4035-83b5-398e4486699f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a3b8b55e-b128-447c-a654-f77b222e5cbc' class='xr-var-data-in' type='checkbox'><label for='data-a3b8b55e-b128-447c-a654-f77b222e5cbc' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Lowest model level zonal wind</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[ 7.930864 ,  1.265992 , -1.6188226, ...,  3.2223969,  3.6941586,\n",
       "        -0.1971534]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>VBOT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.4976 2.597 5.257 ... 1.785 0.1336</div><input id='attrs-76f6990f-f460-4160-80d6-04fc70d462df' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-76f6990f-f460-4160-80d6-04fc70d462df' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b2b76c2e-0e10-4ad8-b7ff-90db19d67a93' class='xr-var-data-in' type='checkbox'><label for='data-b2b76c2e-0e10-4ad8-b7ff-90db19d67a93' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Lowest model level meridional wind</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[0.49764532, 2.5973995 , 5.2567043 , ..., 1.611054  , 1.7851651 ,\n",
       "        0.13360208]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>TREFMXAV_U</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>291.6 271.9 276.9 ... 288.4 289.4</div><input id='attrs-99f2d63a-bc6f-4e8c-b504-27ea6c34eae0' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-99f2d63a-bc6f-4e8c-b504-27ea6c34eae0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f92c040c-a9f9-49a2-bd93-945cf8e0ae57' class='xr-var-data-in' type='checkbox'><label for='data-f92c040c-a9f9-49a2-bd93-945cf8e0ae57' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Urban daily maximum of average 2-m temperature</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[291.56638, 271.86142, 276.85135, ..., 290.03763, 288.39868,\n",
       "        289.41516]], dtype=float32)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-597322b1-bd84-492a-a1ab-aa3408c2a3f0' class='xr-section-summary-in' type='checkbox'  ><label for='section-597322b1-bd84-492a-a1ab-aa3408c2a3f0' class='xr-section-summary' >Attributes: <span>(14)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>NCO :</span></dt><dd>4.4.2</dd><dt><span>host :</span></dt><dd>tcs-f02n07</dd><dt><span>revision_Id :</span></dt><dd>$Id$</dd><dt><span>Version :</span></dt><dd>$Name$</dd><dt><span>initial_file :</span></dt><dd>b.e11.B20TRC5CNBDRD.f09_g16.105.cam.i.2006-01-01-00000.nc</dd><dt><span>source :</span></dt><dd>CAM</dd><dt><span>nco_openmp_thread_number :</span></dt><dd>1</dd><dt><span>topography_file :</span></dt><dd>/scratch/p/pjk/mudryk/cesm1_1_2_LENS/inputdata/atm/cam/topo/USGS-gtopo30_0.9x1.25_remap_c051027.nc</dd><dt><span>intake_esm_varname :</span></dt><dd>FLNS\n",
       "FSNS\n",
       "PRECSC\n",
       "PRECSL\n",
       "PRECT\n",
       "QBOT\n",
       "TREFHT\n",
       "TREFHTMX\n",
       "UBOT\n",
       "VBOT</dd><dt><span>important_note :</span></dt><dd>This data is part of the project &#x27;Blind Evaluation of Lossy Data-Compression in LENS&#x27;.  Please exercise caution before using this data for other purposes.</dd><dt><span>Conventions :</span></dt><dd>CF-1.0</dd><dt><span>logname :</span></dt><dd>mudryk</dd><dt><span>title :</span></dt><dd>UNSET</dd><dt><span>intake_esm_dataset_key :</span></dt><dd>atm.RCP85.daily</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:     (member_id: 1, time: 7299)\n",
       "Coordinates:\n",
       "  * member_id   (member_id) int64 2\n",
       "    lat         float64 40.05\n",
       "    lon         float64 271.2\n",
       "  * time        (time) datetime64[ns] 2081-01-02T12:00:00 ... 2100-12-31T12:0...\n",
       "Data variables:\n",
       "    TREFHT      (member_id, time) float32 267.5 267.7 275.7 ... 280.6 278.0\n",
       "    TREFHTMX    (member_id, time) float32 270.9 276.0 283.8 ... 289.3 285.7\n",
       "    FLNS        (member_id, time) float32 67.13 75.71 53.1 ... 72.42 71.2 62.57\n",
       "    FSNS        (member_id, time) float32 93.39 89.37 88.2 ... 83.75 89.64 77.89\n",
       "    PRECSC      (member_id, time) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n",
       "    PRECSL      (member_id, time) float32 3.048e-09 8.637e-10 ... 0.0 0.0\n",
       "    PRECT       (member_id, time) float32 3.048e-09 8.637e-10 ... 4.164e-10\n",
       "    QBOT        (member_id, time) float32 0.001285 0.001422 ... 0.004192\n",
       "    UBOT        (member_id, time) float32 7.931 1.266 -1.619 ... 3.694 -0.1972\n",
       "    VBOT        (member_id, time) float32 0.4976 2.597 5.257 ... 1.785 0.1336\n",
       "    TREFMXAV_U  (member_id, time) float32 291.6 271.9 276.9 ... 288.4 289.4\n",
       "Attributes: (12/14)\n",
       "    NCO:                       4.4.2\n",
       "    host:                      tcs-f02n07\n",
       "    revision_Id:               $Id$\n",
       "    Version:                   $Name$\n",
       "    initial_file:              b.e11.B20TRC5CNBDRD.f09_g16.105.cam.i.2006-01-...\n",
       "    source:                    CAM\n",
       "    ...                        ...\n",
       "    intake_esm_varname:        FLNS\\nFSNS\\nPRECSC\\nPRECSL\\nPRECT\\nQBOT\\nTREFH...\n",
       "    important_note:            This data is part of the project 'Blind Evalua...\n",
       "    Conventions:               CF-1.0\n",
       "    logname:                   mudryk\n",
       "    title:                     UNSET\n",
       "    intake_esm_dataset_key:    atm.RCP85.daily"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "breeding-junior",
   "metadata": {},
   "source": [
    "**pandas dataframe**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "86c130d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>member_id</th>\n",
       "      <th>time</th>\n",
       "      <th>TREFHT</th>\n",
       "      <th>TREFHTMX</th>\n",
       "      <th>FLNS</th>\n",
       "      <th>FSNS</th>\n",
       "      <th>PRECSC</th>\n",
       "      <th>PRECSL</th>\n",
       "      <th>PRECT</th>\n",
       "      <th>QBOT</th>\n",
       "      <th>UBOT</th>\n",
       "      <th>VBOT</th>\n",
       "      <th>lat</th>\n",
       "      <th>lon</th>\n",
       "      <th>TREFMXAV_U</th>\n",
       "      <th>PRSN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-02 12:00:00</td>\n",
       "      <td>267.530823</td>\n",
       "      <td>270.858276</td>\n",
       "      <td>67.127922</td>\n",
       "      <td>93.389015</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.047973e-09</td>\n",
       "      <td>3.047973e-09</td>\n",
       "      <td>0.001285</td>\n",
       "      <td>7.930864</td>\n",
       "      <td>0.497645</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>271.25</td>\n",
       "      <td>291.566376</td>\n",
       "      <td>3.047973e-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-03 12:00:00</td>\n",
       "      <td>267.687714</td>\n",
       "      <td>276.013184</td>\n",
       "      <td>75.707771</td>\n",
       "      <td>89.367584</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.636923e-10</td>\n",
       "      <td>8.637052e-10</td>\n",
       "      <td>0.001422</td>\n",
       "      <td>1.265992</td>\n",
       "      <td>2.597399</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>271.25</td>\n",
       "      <td>271.861420</td>\n",
       "      <td>8.636923e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-04 12:00:00</td>\n",
       "      <td>275.672028</td>\n",
       "      <td>283.799103</td>\n",
       "      <td>53.098457</td>\n",
       "      <td>88.202408</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.331122e-09</td>\n",
       "      <td>2.900762e-09</td>\n",
       "      <td>0.001883</td>\n",
       "      <td>-1.618823</td>\n",
       "      <td>5.256704</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>271.25</td>\n",
       "      <td>276.851349</td>\n",
       "      <td>1.331122e-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-05 12:00:00</td>\n",
       "      <td>276.890686</td>\n",
       "      <td>284.918884</td>\n",
       "      <td>38.585438</td>\n",
       "      <td>43.366203</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.297357e-09</td>\n",
       "      <td>0.004626</td>\n",
       "      <td>-2.739517</td>\n",
       "      <td>5.846395</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>271.25</td>\n",
       "      <td>284.498749</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2081-01-06 12:00:00</td>\n",
       "      <td>287.462036</td>\n",
       "      <td>291.275452</td>\n",
       "      <td>7.098297</td>\n",
       "      <td>38.443039</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.156371e-14</td>\n",
       "      <td>6.182010e-08</td>\n",
       "      <td>0.009604</td>\n",
       "      <td>-0.635833</td>\n",
       "      <td>8.809414</td>\n",
       "      <td>40.052357</td>\n",
       "      <td>271.25</td>\n",
       "      <td>285.547607</td>\n",
       "      <td>1.156371e-14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   member_id                time      TREFHT    TREFHTMX       FLNS  \\\n",
       "0          2 2081-01-02 12:00:00  267.530823  270.858276  67.127922   \n",
       "1          2 2081-01-03 12:00:00  267.687714  276.013184  75.707771   \n",
       "2          2 2081-01-04 12:00:00  275.672028  283.799103  53.098457   \n",
       "3          2 2081-01-05 12:00:00  276.890686  284.918884  38.585438   \n",
       "4          2 2081-01-06 12:00:00  287.462036  291.275452   7.098297   \n",
       "\n",
       "        FSNS  PRECSC        PRECSL         PRECT      QBOT      UBOT  \\\n",
       "0  93.389015     0.0  3.047973e-09  3.047973e-09  0.001285  7.930864   \n",
       "1  89.367584     0.0  8.636923e-10  8.637052e-10  0.001422  1.265992   \n",
       "2  88.202408     0.0  1.331122e-09  2.900762e-09  0.001883 -1.618823   \n",
       "3  43.366203     0.0  0.000000e+00  1.297357e-09  0.004626 -2.739517   \n",
       "4  38.443039     0.0  1.156371e-14  6.182010e-08  0.009604 -0.635833   \n",
       "\n",
       "       VBOT        lat     lon  TREFMXAV_U          PRSN  \n",
       "0  0.497645  40.052357  271.25  291.566376  3.047973e-09  \n",
       "1  2.597399  40.052357  271.25  271.861420  8.636923e-10  \n",
       "2  5.256704  40.052357  271.25  276.851349  1.331122e-09  \n",
       "3  5.846395  40.052357  271.25  284.498749  0.000000e+00  \n",
       "4  8.809414  40.052357  271.25  285.547607  1.156371e-14  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "designing-asbestos",
   "metadata": {},
   "source": [
    "**data visualization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "standing-infrared",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fafffd2c7f0>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ds[\"TREFMXAV_U\"].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "confused-affect",
   "metadata": {},
   "source": [
    "### Step 2: automated machine learning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "defensive-footage",
   "metadata": {},
   "source": [
    "**train a model (emulator)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "clear-driver",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LGBMRegressor(colsample_bytree=0.6649148062238498,\n",
      "              learning_rate=0.17402065726724145, max_bin=255,\n",
      "              min_child_samples=3, n_estimators=55, num_leaves=15,\n",
      "              reg_alpha=0.0009765625, reg_lambda=0.006761362450996487,\n",
      "              verbose=-1)\n",
      "CPU times: user 26min 44s, sys: 6.18 s, total: 26min 50s\n",
      "Wall time: 29.9 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# assume that we want to split the data into training data and testing data\n",
    "# let's use first 95% for training, and the remaining for testing \n",
    "idx = df.shape[0]\n",
    "train = df.iloc[:int(0.95*idx),:]\n",
    "test = df.iloc[int(0.95*idx):,:]\n",
    "(X_train, y_train) = (train[features], train[label].values)\n",
    "(X_test, y_test) = (test[features], test[label].values)\n",
    "\n",
    "# train the model\n",
    "automl.fit(X_train=X_train, y_train=y_train,\n",
    "           **automl_settings, verbose=-1)\n",
    "print(automl.model.estimator)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "secure-worst",
   "metadata": {},
   "source": [
    "**apply and test the machine learning model**      \n",
    "use `automl.predict(X)` to apply the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "sunrise-removal",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model performance using training data:\n",
      "root mean square error: 2.095150396665036\n",
      "r2: 0.9566854285178814 \n",
      "\n",
      "model performance using testing data:\n",
      "root mean square error: 2.463934505426202\n",
      "r2: 0.9476228731248914\n"
     ]
    }
   ],
   "source": [
    "# training data\n",
    "print(\"model performance using training data:\")\n",
    "y_pred = automl.predict(X_train)\n",
    "print(\"root mean square error:\", \n",
    "      mean_squared_error(y_true=y_train, y_pred=y_pred, squared=False))\n",
    "print(\"r2:\", r2_score(y_true=y_train, y_pred=y_pred),\"\\n\")\n",
    "import pandas as pd\n",
    "d_train = {\"time\":train[\"time\"],\"y_train\":y_train.reshape(-1),\"y_pred\":y_pred.reshape(-1)}\n",
    "df_train = pd.DataFrame(d_train).set_index(\"time\")\n",
    "\n",
    "# testing data\n",
    "print(\"model performance using testing data:\")\n",
    "y_pred = automl.predict(X_test)\n",
    "print(\"root mean square error:\", \n",
    "      mean_squared_error(y_true=y_test, y_pred=y_pred, squared=False))\n",
    "print(\"r2:\", r2_score(y_true=y_test, y_pred=y_pred))\n",
    "d_test = {\"time\":test[\"time\"],\"y_test\":y_test.reshape(-1),\"y_pred\":y_pred.reshape(-1)}\n",
    "df_test = pd.DataFrame(d_test).set_index(\"time\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "technical-summary",
   "metadata": {},
   "source": [
    "**visualization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "supported-pension",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,3))\n",
    "fig.suptitle('emulator evaluation')\n",
    "df_train[\"y_train\"].plot(label=\"reference\",c=\"k\",ax=ax1)\n",
    "df_train[\"y_pred\"].plot(label=\"prediction\",c=\"r\",ax=ax1)\n",
    "ax1.set_title(\"training data\")\n",
    "ax1.set_ylabel(\"urban daily maximum temperature, K\")\n",
    "\n",
    "df_test[\"y_test\"].plot(label=\"reference\",c=\"k\",ax=ax2)\n",
    "df_test[\"y_pred\"].plot(label=\"prediction\",c=\"r\",ax=ax2)\n",
    "ax2.set_title(\"testing data\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
