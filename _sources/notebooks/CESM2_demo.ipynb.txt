{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "26efd514",
   "metadata": {},
   "source": [
    "## Example for CESM 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd3f8e4a-6a62-4434-a7aa-8cf913527976",
   "metadata": {},
   "source": [
    "**NOTE**: compared to the CESM1 demo, here \"Q\" (QBOT), \"U\" (UBOT) and \"V\" (VBOT) are not included.   \n",
    "When the bottom \"lev\" of \"Q\", \"U\", and \"V\" are merged, there is an issue.\n",
    "\n",
    "Reference:     \n",
    "- GitHub: https://github.com/NCAR/cesm2-le-aws    \n",
    "- Data Information: https://ncar.github.io/cesm2-le-aws/model_documentation.html   \n",
    "- Reproduce CESM-LENS: https://github.com/NCAR/cesm2-le-aws/blob/main/notebooks/kay_et_al_lens2.ipynb   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "insured-finnish",
   "metadata": {},
   "source": [
    "**Step 0: load necessary packages and define parameters (no need to change)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "20910345",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/glade/work/zhonghua/miniconda3/envs/aws_urban/lib/python3.8/site-packages/xgboost/compat.py:31: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n",
      "  from pandas import MultiIndex, Int64Index\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--> The keys in the returned dictionary of datasets are constructed as follows:\n",
      "\t'component.experiment.frequency.forcing_variant'\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      <progress value='2' class='' max='2' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      100.00% [2/2 00:00<00:00]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "different lat between CAM and CLM subgrid info, adjust subgrid info's lat\n",
      "CPU times: user 55.3 s, sys: 32 s, total: 1min 27s\n",
      "Wall time: 53.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Display output of plots directly in Notebook\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import json\n",
    "from flaml import AutoML\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "import util\n",
    "\n",
    "with open(\"./config_cesm2.json\",'r') as load_f:\n",
    "#     param = json.loads(json.load(load_f))\n",
    "    param = json.load(load_f)\n",
    "    \n",
    "    model = param[\"model\"] # cesm2\n",
    "    urban_type = param[\"urban_type\"] # md\n",
    "    city_loc = param[\"city_loc\"] # {\"lat\": 40.1164, \"lon\": -88.2434}\n",
    "    l_component = param[\"l_component\"]\n",
    "    a_component = param[\"a_component\"]\n",
    "    experiment = param[\"experiment\"]\n",
    "    frequency = param[\"frequency\"]\n",
    "    cam_ls = param[\"cam_ls\"]\n",
    "    clm_ls = param[\"clm_ls\"]\n",
    "    forcing_variant = param[\"forcing_variant\"]\n",
    "    time = slice(param[\"time_start\"],param[\"time_end\"])\n",
    "    member_id = param[\"member_id\"]\n",
    "    estimator_list = param[\"estimator_list\"]\n",
    "    time_budget = param[\"time_budget\"]\n",
    "    features = param[\"features\"]\n",
    "    label = param[\"label\"]\n",
    "    clm_var_mask = param[\"label\"][0]\n",
    "    \n",
    "# get a dataset\n",
    "ds = util.get_data(model, city_loc, experiment, frequency, member_id, time, cam_ls, clm_ls,\n",
    "                   forcing_variant=forcing_variant, urban_type=urban_type)\n",
    "\n",
    "# create a dataframe\n",
    "ds['time'] = ds.indexes['time'].to_datetimeindex()\n",
    "df = ds.to_dataframe().reset_index().dropna()\n",
    "\n",
    "if \"PRSN\" in features:\n",
    "    df[\"PRSN\"] = df[\"PRECSC\"] + df[\"PRECSL\"]\n",
    "if \"PRECT\" in features:\n",
    "    df[\"PRECT\"] = df[\"PRECC\"] + df[\"PRECL\"]\n",
    "    \n",
    "# setup for automl\n",
    "automl = AutoML()\n",
    "automl_settings = {\n",
    "    \"time_budget\": time_budget,  # in seconds\n",
    "    \"metric\": 'r2',\n",
    "    \"task\": 'regression',\n",
    "    \"estimator_list\":estimator_list,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "productive-negative",
   "metadata": {},
   "source": [
    "### Step 1: data analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mechanical-metabolism",
   "metadata": {},
   "source": [
    "**xarray.Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f9c4e90a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:    (member_id: 1, time: 7299)\n",
       "Coordinates:\n",
       "    lat        float64 40.05\n",
       "    lon        float64 271.2\n",
       "  * member_id  (member_id) &lt;U12 &#x27;r1i1231p1f1&#x27;\n",
       "  * time       (time) datetime64[ns] 2081-01-02T12:00:00 ... 2100-12-31T12:00:00\n",
       "Data variables:\n",
       "    TREFHT     (member_id, time) float32 275.0 272.9 273.8 ... 274.1 276.3 281.3\n",
       "    TREFHTMX   (member_id, time) float32 277.3 274.8 275.4 ... 278.0 283.7 282.8\n",
       "    FLNS       (member_id, time) float32 59.86 68.45 24.26 ... 90.92 70.91 12.33\n",
       "    FSNS       (member_id, time) float32 90.96 74.59 38.51 ... 91.1 79.44 22.48\n",
       "    PRECSC     (member_id, time) float32 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n",
       "    PRECSL     (member_id, time) float32 1.517e-10 3.642e-09 ... 0.0 0.0\n",
       "    PRECC      (member_id, time) float32 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n",
       "    PRECL      (member_id, time) float32 4.767e-10 3.642e-09 ... 1.786e-09\n",
       "    TREFMXAV   (member_id, time) float64 277.5 275.5 275.8 ... 278.5 283.8 283.1\n",
       "Attributes:\n",
       "    intake_esm_varname:      FLNS\\nFSNS\\nPRECC\\nPRECL\\nPRECSC\\nPRECSL\\nTREFHT...\n",
       "    Conventions:             CF-1.0\n",
       "    logname:                 sunseon\n",
       "    source:                  CAM\n",
       "    model_doi_url:           https://doi.org/10.5065/D67H1H0V\n",
       "    time_period_freq:        day_1\n",
       "    host:                    mom1\n",
       "    topography_file:         /mnt/lustre/share/CESM/cesm_input/atm/cam/topo/f...\n",
       "    intake_esm_dataset_key:  atm.ssp370.daily.cmip6</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-be6b3f86-8605-4a16-b465-38173ca9f23d' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-be6b3f86-8605-4a16-b465-38173ca9f23d' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>member_id</span>: 1</li><li><span class='xr-has-index'>time</span>: 7299</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-01bcd74f-34f5-4eba-9be3-77daefcfc4c4' class='xr-section-summary-in' type='checkbox'  checked><label for='section-01bcd74f-34f5-4eba-9be3-77daefcfc4c4' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>lat</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>40.05</div><input id='attrs-d05316b6-4382-4d47-a776-b80484554574' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-d05316b6-4382-4d47-a776-b80484554574' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-deba7e15-693a-4f5c-983d-547912bef20a' class='xr-var-data-in' type='checkbox'><label for='data-deba7e15-693a-4f5c-983d-547912bef20a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>units :</span></dt><dd>degrees_north</dd></dl></div><div class='xr-var-data'><pre>array(40.05235602)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>lon</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>271.2</div><input id='attrs-7327f9a9-9222-4d5a-8289-77f5058e193e' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-7327f9a9-9222-4d5a-8289-77f5058e193e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7ac78f52-31e1-4853-b3e7-fc05814b4cbe' class='xr-var-data-in' type='checkbox'><label for='data-7ac78f52-31e1-4853-b3e7-fc05814b4cbe' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>longitude</dd><dt><span>units :</span></dt><dd>degrees_east</dd></dl></div><div class='xr-var-data'><pre>array(271.25)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>member_id</span></div><div class='xr-var-dims'>(member_id)</div><div class='xr-var-dtype'>&lt;U12</div><div class='xr-var-preview xr-preview'>&#x27;r1i1231p1f1&#x27;</div><input id='attrs-ad8f412b-1dca-465d-a107-1fe0c4477f34' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ad8f412b-1dca-465d-a107-1fe0c4477f34' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-41f894fc-3f6b-4d0f-8df0-5d246fa73b15' class='xr-var-data-in' type='checkbox'><label for='data-41f894fc-3f6b-4d0f-8df0-5d246fa73b15' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;r1i1231p1f1&#x27;], dtype=&#x27;&lt;U12&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2081-01-02T12:00:00 ... 2100-12-...</div><input id='attrs-9b5b2c9a-6bc0-410f-8237-fd61e122ad91' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9b5b2c9a-6bc0-410f-8237-fd61e122ad91' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4bbe5da9-5f68-4cd0-9809-ef5936452aa4' class='xr-var-data-in' type='checkbox'><label for='data-4bbe5da9-5f68-4cd0-9809-ef5936452aa4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2081-01-02T12:00:00.000000000&#x27;, &#x27;2081-01-03T12:00:00.000000000&#x27;,\n",
       "       &#x27;2081-01-04T12:00:00.000000000&#x27;, ..., &#x27;2100-12-29T12:00:00.000000000&#x27;,\n",
       "       &#x27;2100-12-30T12:00:00.000000000&#x27;, &#x27;2100-12-31T12:00:00.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-3935280b-8d33-496b-8e7b-36fbbe5a0696' class='xr-section-summary-in' type='checkbox'  checked><label for='section-3935280b-8d33-496b-8e7b-36fbbe5a0696' class='xr-section-summary' >Data variables: <span>(9)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>TREFHT</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>275.0 272.9 273.8 ... 276.3 281.3</div><input id='attrs-6c1039fa-e55f-4265-9c28-91e2fd14b934' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-6c1039fa-e55f-4265-9c28-91e2fd14b934' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d15d1a5d-9fe2-416f-830c-e6157c9fb793' class='xr-var-data-in' type='checkbox'><label for='data-d15d1a5d-9fe2-416f-830c-e6157c9fb793' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Reference height temperature</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[275.04935, 272.92743, 273.79892, ..., 274.09045, 276.34808,\n",
       "        281.29715]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>TREFHTMX</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>277.3 274.8 275.4 ... 283.7 282.8</div><input id='attrs-4b19240a-2936-46a5-a149-39100504ebec' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-4b19240a-2936-46a5-a149-39100504ebec' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8c420149-ece1-494e-9a7e-9d6bcc4dad59' class='xr-var-data-in' type='checkbox'><label for='data-8c420149-ece1-494e-9a7e-9d6bcc4dad59' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: maximum</dd><dt><span>long_name :</span></dt><dd>Maximum reference height temperature over output period</dd><dt><span>units :</span></dt><dd>K</dd></dl></div><div class='xr-var-data'><pre>array([[277.3294 , 274.8425 , 275.40244, ..., 278.03296, 283.67844,\n",
       "        282.81775]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>FLNS</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>59.86 68.45 24.26 ... 70.91 12.33</div><input id='attrs-c65baad9-2240-4aad-9f68-70497cc6a987' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-c65baad9-2240-4aad-9f68-70497cc6a987' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f7c90907-93e8-4b90-bac6-c46fdfe2be50' class='xr-var-data-in' type='checkbox'><label for='data-f7c90907-93e8-4b90-bac6-c46fdfe2be50' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sampling_Sequence :</span></dt><dd>rad_lwsw</dd><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Net longwave flux at surface</dd><dt><span>units :</span></dt><dd>W/m2</dd></dl></div><div class='xr-var-data'><pre>array([[59.85615 , 68.44665 , 24.26329 , ..., 90.923416, 70.90993 ,\n",
       "        12.328332]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>FSNS</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>90.96 74.59 38.51 ... 79.44 22.48</div><input id='attrs-dc19b28c-353c-4834-a022-d807db4a2fce' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-dc19b28c-353c-4834-a022-d807db4a2fce' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-66e2c57c-59f0-4f10-b225-1d2e1656425f' class='xr-var-data-in' type='checkbox'><label for='data-66e2c57c-59f0-4f10-b225-1d2e1656425f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sampling_Sequence :</span></dt><dd>rad_lwsw</dd><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Net solar flux at surface</dd><dt><span>units :</span></dt><dd>W/m2</dd></dl></div><div class='xr-var-data'><pre>array([[90.95694 , 74.58842 , 38.506813, ..., 91.10133 , 79.43732 ,\n",
       "        22.475523]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECSC</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id='attrs-7096cc90-eb66-4493-82dc-03df7ab76202' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-7096cc90-eb66-4493-82dc-03df7ab76202' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0f436126-0bba-4609-a0ea-e77cd0ce6047' class='xr-var-data-in' type='checkbox'><label for='data-0f436126-0bba-4609-a0ea-e77cd0ce6047' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Convective snow rate (water equivalent)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECSL</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>1.517e-10 3.642e-09 ... 0.0 0.0</div><input id='attrs-634776e0-3438-4e35-823c-6eb1cb6004f0' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-634776e0-3438-4e35-823c-6eb1cb6004f0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b15cf61e-5338-447e-b7f0-13fcec2b631a' class='xr-var-data-in' type='checkbox'><label for='data-b15cf61e-5338-447e-b7f0-13fcec2b631a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Large-scale (stable) snow rate (water equivalent)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[1.5165935e-10, 3.6417851e-09, 1.9563589e-09, ..., 4.5052375e-24,\n",
       "        0.0000000e+00, 0.0000000e+00]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECC</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id='attrs-201c0f01-918c-4d7f-8403-97779fc2dcec' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-201c0f01-918c-4d7f-8403-97779fc2dcec' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ea5c64f0-e24d-46f1-a82e-a221b0bf2a30' class='xr-var-data-in' type='checkbox'><label for='data-ea5c64f0-e24d-46f1-a82e-a221b0bf2a30' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Convective precipitation rate (liq + ice)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>PRECL</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>4.767e-10 3.642e-09 ... 1.786e-09</div><input id='attrs-c628dfd2-e8fa-49b7-b16e-a28462b89651' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-c628dfd2-e8fa-49b7-b16e-a28462b89651' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6b43d174-f090-4085-8738-6d8ff0581acc' class='xr-var-data-in' type='checkbox'><label for='data-6b43d174-f090-4085-8738-6d8ff0581acc' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>cell_methods :</span></dt><dd>time: mean</dd><dt><span>long_name :</span></dt><dd>Large-scale (stable) precipitation rate (liq + ice)</dd><dt><span>units :</span></dt><dd>m/s</dd></dl></div><div class='xr-var-data'><pre>array([[4.7669318e-10, 3.6420198e-09, 2.2096349e-09, ..., 5.2666882e-24,\n",
       "        5.3328375e-10, 1.7861942e-09]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>TREFMXAV</span></div><div class='xr-var-dims'>(member_id, time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>277.5 275.5 275.8 ... 283.8 283.1</div><input id='attrs-caecb4ec-c123-46d8-b6f6-62acb52bcfd8' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-caecb4ec-c123-46d8-b6f6-62acb52bcfd8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ad35442b-81d6-498c-8b40-9126d59f6170' class='xr-var-data-in' type='checkbox'><label for='data-ad35442b-81d6-498c-8b40-9126d59f6170' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[277.53610229, 275.4932251 , 275.75091553, ..., 278.48092651,\n",
       "        283.81533813, 283.09860229]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-62fa33d7-3a22-4462-866c-556a06df9f86' class='xr-section-summary-in' type='checkbox'  checked><label for='section-62fa33d7-3a22-4462-866c-556a06df9f86' class='xr-section-summary' >Attributes: <span>(9)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>intake_esm_varname :</span></dt><dd>FLNS\n",
       "FSNS\n",
       "PRECC\n",
       "PRECL\n",
       "PRECSC\n",
       "PRECSL\n",
       "TREFHT\n",
       "TREFHTMX</dd><dt><span>Conventions :</span></dt><dd>CF-1.0</dd><dt><span>logname :</span></dt><dd>sunseon</dd><dt><span>source :</span></dt><dd>CAM</dd><dt><span>model_doi_url :</span></dt><dd>https://doi.org/10.5065/D67H1H0V</dd><dt><span>time_period_freq :</span></dt><dd>day_1</dd><dt><span>host :</span></dt><dd>mom1</dd><dt><span>topography_file :</span></dt><dd>/mnt/lustre/share/CESM/cesm_input/atm/cam/topo/fv_0.9x1.25_nc3000_Nsw042_Nrs008_Co060_Fi001_ZR_sgh30_24km_GRNL_c170103.nc</dd><dt><span>intake_esm_dataset_key :</span></dt><dd>atm.ssp370.daily.cmip6</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:    (member_id: 1, time: 7299)\n",
       "Coordinates:\n",
       "    lat        float64 40.05\n",
       "    lon        float64 271.2\n",
       "  * member_id  (member_id) <U12 'r1i1231p1f1'\n",
       "  * time       (time) datetime64[ns] 2081-01-02T12:00:00 ... 2100-12-31T12:00:00\n",
       "Data variables:\n",
       "    TREFHT     (member_id, time) float32 275.0 272.9 273.8 ... 274.1 276.3 281.3\n",
       "    TREFHTMX   (member_id, time) float32 277.3 274.8 275.4 ... 278.0 283.7 282.8\n",
       "    FLNS       (member_id, time) float32 59.86 68.45 24.26 ... 90.92 70.91 12.33\n",
       "    FSNS       (member_id, time) float32 90.96 74.59 38.51 ... 91.1 79.44 22.48\n",
       "    PRECSC     (member_id, time) float32 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n",
       "    PRECSL     (member_id, time) float32 1.517e-10 3.642e-09 ... 0.0 0.0\n",
       "    PRECC      (member_id, time) float32 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0\n",
       "    PRECL      (member_id, time) float32 4.767e-10 3.642e-09 ... 1.786e-09\n",
       "    TREFMXAV   (member_id, time) float64 277.5 275.5 275.8 ... 278.5 283.8 283.1\n",
       "Attributes:\n",
       "    intake_esm_varname:      FLNS\\nFSNS\\nPRECC\\nPRECL\\nPRECSC\\nPRECSL\\nTREFHT...\n",
       "    Conventions:             CF-1.0\n",
       "    logname:                 sunseon\n",
       "    source:                  CAM\n",
       "    model_doi_url:           https://doi.org/10.5065/D67H1H0V\n",
       "    time_period_freq:        day_1\n",
       "    host:                    mom1\n",
       "    topography_file:         /mnt/lustre/share/CESM/cesm_input/atm/cam/topo/f...\n",
       "    intake_esm_dataset_key:  atm.ssp370.daily.cmip6"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "breeding-junior",
   "metadata": {},
   "source": [
    "**pandas dataframe**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e42fc00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>member_id</th>\n",
       "      <th>time</th>\n",
       "      <th>TREFHT</th>\n",
       "      <th>TREFHTMX</th>\n",
       "      <th>FLNS</th>\n",
       "      <th>FSNS</th>\n",
       "      <th>PRECSC</th>\n",
       "      <th>PRECSL</th>\n",
       "      <th>PRECC</th>\n",
       "      <th>PRECL</th>\n",
       "      <th>lat</th>\n",
       "      <th>lon</th>\n",
       "      <th>TREFMXAV</th>\n",
       "      <th>PRSN</th>\n",
       "      <th>PRECT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>r1i1231p1f1</td>\n",
       "      <td>2081-01-02 12:00:00</td>\n",
       "      <td>275.049347</td>\n",
       "      <td>277.329407</td>\n",
       "      <td>59.856152</td>\n",
       "      <td>90.956940</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.516594e-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.766932e-10</td>\n",
       "      <td>40.052356</td>\n",
       "      <td>271.25</td>\n",
       "      <td>277.536102</td>\n",
       "      <td>1.516594e-10</td>\n",
       "      <td>4.766932e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>r1i1231p1f1</td>\n",
       "      <td>2081-01-03 12:00:00</td>\n",
       "      <td>272.927429</td>\n",
       "      <td>274.842499</td>\n",
       "      <td>68.446648</td>\n",
       "      <td>74.588417</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.641785e-09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.642020e-09</td>\n",
       "      <td>40.052356</td>\n",
       "      <td>271.25</td>\n",
       "      <td>275.493225</td>\n",
       "      <td>3.641785e-09</td>\n",
       "      <td>3.642020e-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>r1i1231p1f1</td>\n",
       "      <td>2081-01-04 12:00:00</td>\n",
       "      <td>273.798920</td>\n",
       "      <td>275.402435</td>\n",
       "      <td>24.263290</td>\n",
       "      <td>38.506813</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.956359e-09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.209635e-09</td>\n",
       "      <td>40.052356</td>\n",
       "      <td>271.25</td>\n",
       "      <td>275.750916</td>\n",
       "      <td>1.956359e-09</td>\n",
       "      <td>2.209635e-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>r1i1231p1f1</td>\n",
       "      <td>2081-01-05 12:00:00</td>\n",
       "      <td>277.125549</td>\n",
       "      <td>286.210144</td>\n",
       "      <td>59.307308</td>\n",
       "      <td>86.190071</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.833845e-14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.872912e-14</td>\n",
       "      <td>40.052356</td>\n",
       "      <td>271.25</td>\n",
       "      <td>286.460663</td>\n",
       "      <td>1.833845e-14</td>\n",
       "      <td>4.872912e-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>r1i1231p1f1</td>\n",
       "      <td>2081-01-06 12:00:00</td>\n",
       "      <td>280.623657</td>\n",
       "      <td>282.968323</td>\n",
       "      <td>38.607136</td>\n",
       "      <td>17.733625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.573996e-24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.074043e-10</td>\n",
       "      <td>40.052356</td>\n",
       "      <td>271.25</td>\n",
       "      <td>284.418915</td>\n",
       "      <td>3.573996e-24</td>\n",
       "      <td>2.074043e-10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     member_id                time      TREFHT    TREFHTMX       FLNS  \\\n",
       "0  r1i1231p1f1 2081-01-02 12:00:00  275.049347  277.329407  59.856152   \n",
       "1  r1i1231p1f1 2081-01-03 12:00:00  272.927429  274.842499  68.446648   \n",
       "2  r1i1231p1f1 2081-01-04 12:00:00  273.798920  275.402435  24.263290   \n",
       "3  r1i1231p1f1 2081-01-05 12:00:00  277.125549  286.210144  59.307308   \n",
       "4  r1i1231p1f1 2081-01-06 12:00:00  280.623657  282.968323  38.607136   \n",
       "\n",
       "        FSNS  PRECSC        PRECSL  PRECC         PRECL        lat     lon  \\\n",
       "0  90.956940     0.0  1.516594e-10    0.0  4.766932e-10  40.052356  271.25   \n",
       "1  74.588417     0.0  3.641785e-09    0.0  3.642020e-09  40.052356  271.25   \n",
       "2  38.506813     0.0  1.956359e-09    0.0  2.209635e-09  40.052356  271.25   \n",
       "3  86.190071     0.0  1.833845e-14    0.0  4.872912e-14  40.052356  271.25   \n",
       "4  17.733625     0.0  3.573996e-24    0.0  2.074043e-10  40.052356  271.25   \n",
       "\n",
       "     TREFMXAV          PRSN         PRECT  \n",
       "0  277.536102  1.516594e-10  4.766932e-10  \n",
       "1  275.493225  3.641785e-09  3.642020e-09  \n",
       "2  275.750916  1.956359e-09  2.209635e-09  \n",
       "3  286.460663  1.833845e-14  4.872912e-14  \n",
       "4  284.418915  3.573996e-24  2.074043e-10  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "designing-asbestos",
   "metadata": {},
   "source": [
    "**data visualization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "35c2c5d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2b60524db1c0>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ds[\"TREFMXAV\"].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "confused-affect",
   "metadata": {},
   "source": [
    "### Step 2: automated machine learning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "defensive-footage",
   "metadata": {},
   "source": [
    "**train a model (emulator)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "023c3399",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LGBMRegressor(colsample_bytree=0.7463308378914483,\n",
      "              learning_rate=0.1530612501227463, max_bin=1023,\n",
      "              min_child_samples=2, n_estimators=60, num_leaves=49,\n",
      "              reg_alpha=0.0009765625, reg_lambda=0.012698515198279536,\n",
      "              verbose=-1)\n",
      "CPU times: user 3min 4s, sys: 4.67 s, total: 3min 8s\n",
      "Wall time: 15.5 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# assume that we want to split the data into training data and testing data\n",
    "# let's use first 95% for training, and the remaining for testing \n",
    "idx = df.shape[0]\n",
    "train = df.iloc[:int(0.95*idx),:]\n",
    "test = df.iloc[int(0.95*idx):,:]\n",
    "(X_train, y_train) = (train[features], train[label].values)\n",
    "(X_test, y_test) = (test[features], test[label].values)\n",
    "\n",
    "# train the model\n",
    "automl.fit(X_train=X_train, y_train=y_train,\n",
    "           **automl_settings, verbose=-1)\n",
    "print(automl.model.estimator)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "secure-worst",
   "metadata": {},
   "source": [
    "**apply and test the machine learning model**      \n",
    "use `automl.predict(X)` to apply the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2bbf7bfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model performance using training data:\n",
      "root mean square error: 1.0634138507297426\n",
      "r2: 0.9928674646696605 \n",
      "\n",
      "model performance using testing data:\n",
      "root mean square error: 1.6361120260552937\n",
      "r2: 0.9852130533126713\n"
     ]
    }
   ],
   "source": [
    "# training data\n",
    "print(\"model performance using training data:\")\n",
    "y_pred = automl.predict(X_train)\n",
    "print(\"root mean square error:\", \n",
    "      mean_squared_error(y_true=y_train, y_pred=y_pred, squared=False))\n",
    "print(\"r2:\", r2_score(y_true=y_train, y_pred=y_pred),\"\\n\")\n",
    "import pandas as pd\n",
    "d_train = {\"time\":train[\"time\"],\"y_train\":y_train.reshape(-1),\"y_pred\":y_pred.reshape(-1)}\n",
    "df_train = pd.DataFrame(d_train).set_index(\"time\")\n",
    "\n",
    "# testing data\n",
    "print(\"model performance using testing data:\")\n",
    "y_pred = automl.predict(X_test)\n",
    "print(\"root mean square error:\", \n",
    "      mean_squared_error(y_true=y_test, y_pred=y_pred, squared=False))\n",
    "print(\"r2:\", r2_score(y_true=y_test, y_pred=y_pred))\n",
    "d_test = {\"time\":test[\"time\"],\"y_test\":y_test.reshape(-1),\"y_pred\":y_pred.reshape(-1)}\n",
    "df_test = pd.DataFrame(d_test).set_index(\"time\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "technical-summary",
   "metadata": {},
   "source": [
    "**visualization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1d051ff8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,3))\n",
    "fig.suptitle('emulator evaluation')\n",
    "df_train[\"y_train\"].plot(label=\"reference\",c=\"k\",ax=ax1)\n",
    "df_train[\"y_pred\"].plot(label=\"prediction\",c=\"r\",ax=ax1)\n",
    "ax1.set_title(\"training data\")\n",
    "ax1.set_ylabel(\"urban daily maximum temperature, K\")\n",
    "\n",
    "df_test[\"y_test\"].plot(label=\"reference\",c=\"k\",ax=ax2)\n",
    "df_test[\"y_pred\"].plot(label=\"prediction\",c=\"r\",ax=ax2)\n",
    "ax2.set_title(\"testing data\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
